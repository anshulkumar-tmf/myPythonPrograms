# function to get the event date from the list of events generated by the even class
def get_event_date(event):
	return event.date

# create a dictionary (set) of all users per machine, and remove users if they have logged out
def current_users(events):
    events.sort(key=get_event_date)
    machines = {}
    for event in events:
        if event.machine not in machines:
            # machine being added as an empty set to the dictionary
            machines[event.machine] = set()
        if event.type == "login":
            # adding element to the set within the dictionary
            machines[event.machine].add(event.user)
        elif event.type == "logout":
            # removing element from the set within the dictionary
            machines[event.machine].remove(event.user)
    return machines

# generate a report by printing out the contents of the dictionary created above
def generate_report(machines):
    for machine, users in machines.items():
        # this is done so that when a machine doesnt have any active users, it doesnt get printed
        if len (users) > 0:
            user_list = ",".join(users)
            print("{}: {}".format(machine, user_list))

# creating the Event class which will generate a list of Events
class Event:
  def __init__(self, event_date, event_type, machine_name, user):
    self.date = event_date
    self.type = event_type
    self.machine = machine_name
    self.user = user

# events being added to a list using the Event class
events = [
  Event('2020-01-21 12:45:46', 'login', 'myworkstation.local', 'jordan'),
#  Event('2020-01-22 15:53:42', 'logout', 'webserver.local', 'jordan'),
  Event('2020-01-21 18:53:21', 'login', 'webserver.local', 'lane'),
#  Event('2020-01-22 10:25:34', 'logout', 'myworkstation.local', 'jordan'),
  Event('2020-01-21 08:20:01', 'login', 'webserver.local', 'jordan'),
  Event('2020-01-23 11:24:35', 'login', 'mailserver.local', 'chris'),
]

print(events)
users = current_users(events)
print(users)

generate_report(users)